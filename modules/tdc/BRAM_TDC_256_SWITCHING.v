`default_nettype none
//---------------------------------------------------------------------
//--                                                                 --
//-- Company:  University of Bonn                                    --
//-- Engineer: John Bieling                                          --
//--                                                                 --
//---------------------------------------------------------------------
//--                                                                 --
//-- Copyright (C) 2015 John Bieling                                 --
//--                                                                 --
//-- This program is free software; you can redistribute it and/or   --
//-- modify it under the terms of the GNU General Public License as  --
//-- published by the Free Software Foundation; either version 3 of  --
//-- the License, or (at your option) any later version.             --
//--                                                                 --
//-- This program is distributed in the hope that it will be useful, --
//-- but WITHOUT ANY WARRANTY; without even the implied warranty of  --
//-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the    --
//-- GNU General Public License for more details.                    --
//--                                                                 --
//-- You should have received a copy of the GNU General Public       --
//-- License along with this program; if not, see                    --
//-- <http://www.gnu.org/licenses>.                                  --
//--                                                                 --
//---------------------------------------------------------------------


//-- The module can be configured with these parameters (defaults given in braces):
//--                      
//-- width(1) : BRAM is 36Bit wide. The width parameter defines how many of them
//--            should be used parallel to build the TDC


module BRAMTDC_256_SWITCHING (d, q, tdc_event, tdc_readnext, tdc_switch, CLK, tdc_request, data_size);

	parameter width = 1;

	output wire [(width*36)-1:0] q;
	input wire [(width*36)-1:0] d;  
	input wire CLK;
	input wire tdc_event;
	input wire tdc_readnext;
	input wire tdc_switch;
	input wire tdc_request;
	
	output reg [7:0] data_size;
	wire [31:0] data_size_counter;

	slimfast_multioption_counter #(.clip_count(0)) DATASIZE_COUNTER (
		 .countClock(CLK), 
		 .count(tdc_event == 1'b1 && data_size_counter[7:0] != 8'b1111_1111),
		 .reset(tdc_request),
		 .countout(data_size_counter));


	always@(posedge CLK) 
	begin
		//the stored data_size is without the trigger, so a size of "2" are 3 events
		if (tdc_switch == 1'b1) data_size <= data_size_counter[7:0];
	end

	
	genvar k;
	generate
	 for (k=0; k < width; k=k+1) begin : TDCS

		(* EQUIVALENT_REGISTER_REMOVAL="NO" *) reg area = 1'b0;
		wire [31:0] a_write_counter;
		wire [7:0] a_read_counter;
		wire [7:0] a_write = a_write_counter[7:0];
		wire [7:0] a_read = a_read_counter[7:0]; 

		//he will complain about "Property EQUIVALENT REGISTER REMOVAL not applicable on a instance", but it works
		(* EQUIVALENT_REGISTER_REMOVAL="NO" *) slimfast_multioption_counter #(.clip_count(0)) WRITE_ADDR_COUNTER (
			 .countClock(CLK), 
			 .count(tdc_event),
			 .reset(1'b0),
			 .countout(a_write_counter));
	
		//he will complain about "Property EQUIVALENT REGISTER REMOVAL not applicable on a instance", but it works
		 (* EQUIVALENT_REGISTER_REMOVAL="NO" *) loadable_downcounter8 READ_ADDR_COUNTER (
			 .countClock(CLK), 
			 .count(tdc_readnext), 
			 .loadvalue(a_write),
			 .load(tdc_switch),
			 .countout(a_read_counter));

		always@(posedge CLK) 
		begin

			if (tdc_switch == 1'b1) area <= ~area;

		end
		
		RAMB16_S36_S36 #(
			.INIT_A(36'h000000000),  // Value of output RAM registers on Port A at startup
			.INIT_B(36'h000000000),  // Value of output RAM registers on Port B at startup
			.SRVAL_A(36'h000000000), // Port A output value upon SSR assertion
			.SRVAL_B(36'h000000000), // Port B output value upon SSR assertion
			.WRITE_MODE_A("WRITE_FIRST"), // WRITE_FIRST, READ_FIRST or NO_CHANGE
			.WRITE_MODE_B("WRITE_FIRST"), // WRITE_FIRST, READ_FIRST or NO_CHANGE
			.SIM_COLLISION_CHECK("ALL"),  // "NONE", "WARNING_ONLY", "GENERATE_X_ONLY", "ALL" 

			// The following INIT_xx declarations specify the initial contents of the RAM
			// Address 0 to 127
			.INIT_00(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_01(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_02(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_03(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_04(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_05(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_06(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_07(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_08(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_09(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_0A(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_0B(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_0C(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_0D(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_0E(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_0F(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			// Address 128 to 255
			.INIT_10(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_11(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_12(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_13(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_14(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_15(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_16(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_17(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_18(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_19(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_1A(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_1B(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_1C(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_1D(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_1E(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_1F(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			// Address 256 to 383
			.INIT_20(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_21(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_22(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_23(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_24(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_25(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_26(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_27(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_28(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_29(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_2A(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_2B(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_2C(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_2D(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_2E(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_2F(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			// Address 384 to 511
			.INIT_30(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_31(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_32(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_33(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_34(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_35(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_36(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_37(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_38(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_39(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_3A(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_3B(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_3C(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_3D(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_3E(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),
			.INIT_3F(256'h00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000),

			// The next set of INITP_xx are for the parity bits
			// Address 0 to 127
			.INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
			.INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
			// Address 128 to 255
			.INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
			.INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
			// Address 256 to 383
			.INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
			.INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
			// Address 384 to 511
			.INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
			.INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000)
		) RAMB_TDC (
			.DIA(d[k*36+31:k*36]),     	// Port A 32-bit Data Input
			.DIPA(d[k*36+35:k*36+32]), 	// Port A 4-bit parity Input
			.DOA(),     						// Port A 32-bit Data Output
			.DOPA(),    						// Port A 4-bit Parity Output
			.ADDRA({area,a_write}),  		// Port B 9-bit Address Input
			.CLKA(CLK),    					// Port A Clock
			.WEA(1'b1),      					// Port A Write Enable Input
			.ENA(1'b1),      					// Port A RAM Enable Input
			.SSRA(1'b0),    					// Port A Synchronous Set/Reset Input

			.DIB(32'b0),      				// Port B 32-bit Data Input
			.DIPB(4'b0),   					// Port-B 4-bit parity Input
			.DOB(q[k*36+31:k*36]),    	// Port B 32-bit Data Output
			.DOPB(q[k*36+35:k*36+32]),	// Port B 4-bit Parity Output
			.ADDRB({~area,a_read}),  		// Port A 9-bit Address Input
			.CLKB(CLK),    					// Port B Clock
			.ENB(1'b1),      					// Port B RAM Enable Input
			.SSRB(1'b0),    					// Port B Synchronous Set/Reset Input
			.WEB(1'b0)       					// Port B Write Enable Input
		);

	 end
	endgenerate
				
endmodule
